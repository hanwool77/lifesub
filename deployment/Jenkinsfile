def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(
            name: 'podman', 
            image: "mgoltzsche/podman", 
            ttyEnabled: true, 
            command: 'cat', 
            privileged: true,
            resourceRequestMemory: '256Mi',
            resourceLimitMemory: '512Mi',
            resourceRequestCpu: '100m',
            resourceLimitCpu: '200m'
        ),
        containerTemplate(
            name: 'gradle',
            image: 'gradle:jdk17',
            ttyEnabled: true,
            command: 'cat',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            resourceRequestCpu: '200m',
            resourceLimitCpu: '1000m',
            envVars: [
                envVar(key: 'GRADLE_OPTS', value: '-Xmx1g -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false'),
                envVar(key: 'CI', value: 'true'),
                envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true'),
                envVar(key: 'TESTCONTAINERS_DISABLE', value: 'true')
            ]
        ),
        containerTemplate(
            name: 'azure-cli', 
            image: 'hiondal/azure-kubectl:latest', 
            command: 'cat', 
            ttyEnabled: true,
            resourceRequestMemory: '128Mi',
            resourceLimitMemory: '256Mi',
            resourceRequestCpu: '50m',
            resourceLimitCpu: '100m'
        ),
        containerTemplate(
            name: 'envsubst', 
            image: "hiondal/envsubst", 
            command: 'sleep', 
            args: '1h',
            resourceRequestMemory: '64Mi',
            resourceLimitMemory: '128Mi',
            resourceRequestCpu: '25m',
            resourceLimitCpu: '50m'
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def services = ['member', 'mysub', 'recommend']

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-03 --name aks-digitalgarage-03 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Clean Existing Resources') {
            container('azure-cli') {
                sh """
                    echo "Cleaning existing resources..."
                    kubectl delete ingress --all -n ${namespace} --ignore-not-found=true
                    kubectl delete deployment --all -n ${namespace} --ignore-not-found=true
                    kubectl delete service --all -n ${namespace} --ignore-not-found=true
                    kubectl delete configmap --all -n ${namespace} --ignore-not-found=true
                    kubectl delete secret --all -n ${namespace} --ignore-not-found=true
                    sleep 10
                """
            }
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                // TestContainers 설정 (CI 환경에서는 비활성화)
                def testContainersConfig = '''testcontainers.reuse.enable=false
testcontainers.ryuk.disabled=true
testcontainers.checks.disable=true'''

                sh """
                    # TestContainers 설정 파일 생성 (사용하지 않지만 에러 방지용)
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // 빌드 및 SonarQube 분석
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew
                        export GRADLE_OPTS="-Xmx1g -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.workers.max=1"
                        export CI=true
                        export TESTCONTAINERS_DISABLE=true

                        echo "========== Building Applications =========="
                        # 순차적 빌드 (메모리 사용량 분산)
                        echo "Building member service..."
                        ./gradlew :member:clean :member:build -x test --no-daemon --max-workers=1
                        
                        echo "Building mysub service..."
                        ./gradlew :mysub-infra:clean :mysub-infra:build -x test --no-daemon --max-workers=1
                        
                        echo "Building recommend service..."
                        ./gradlew :recommend:clean :recommend:build -x test --no-daemon --max-workers=1

                        echo "========== Running Tests (excluding E2E) =========="
                        # Unit/Integration 테스트 (E2E 테스트 제외)
                        echo "Testing member service..."
                        ./gradlew :member:test -Dtest.exclude="**/*E2ETest*" --no-daemon --max-workers=1 || true
                        
                        echo "Testing recommend service..."
                        ./gradlew :recommend:test --no-daemon --max-workers=1 || true
                        
                        echo "Testing mysub service..."
                        ./gradlew :mysub-infra:test --no-daemon --max-workers=1 || true

                        echo "========== SonarQube Analysis =========="
                        # SonarQube 분석
                        echo "SonarQube analysis for member service..."
                        ./gradlew :member:jacocoTestReport :member:sonar --no-daemon --max-workers=1 \
                            -Dsonar.projectKey=lifesub-member-dg0413 \
                            -Dsonar.projectName=lifesub-member \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**,**/e2e/**
