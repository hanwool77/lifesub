def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk17',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h')
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def services = ['member', 'mysub', 'recommend']

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group rg-digitalgarage-03 --name aks-digitalgarage-03 --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers 설정
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // 빌드 및 SonarQube 분석
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew

                        # 빌드 실행
                        ./gradlew :member:build :mysub-infra:build :recommend:build -x test

                        # Member 서비스
                        ./gradlew :member:test :member:jacocoTestReport :member:sonar \
                            -Dsonar.projectKey=lifesub-member-dg0413 \
                            -Dsonar.projectName=lifesub-member \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Recommend 서비스
                        ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \
                            -Dsonar.projectKey=lifesub-recommend-dg0413 \
                            -Dsonar.projectName=lifesub-recommend \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Mysub 서비스 (biz & infra 구조)
                        ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \
                            -Dsonar.projectKey=lifesub-mysub-dg0413 \
                            -Dsonar.projectName=lifesub-mysub \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                    """
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            podman build \
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                -f deployment/container/Dockerfile \
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Generate & Apply Manifest') {
            container('envsubst') {
                sh """
                    export namespace=${namespace}
                    export allowed_origins=${props.allowed_origins}
                    export ingress_host=${props.ingress_host}
                    export jwt_secret_key=${props.jwt_secret_key}
                    export postgres_user=${props.postgres_user}
                    export postgres_password=${props.postgres_password}
                    export replicas=${props.replicas}
                    export resources_requests_cpu=${props.resources_requests_cpu}
                    export resources_requests_memory=${props.resources_requests_memory}
                    export resources_limits_cpu=${props.resources_limits_cpu}
                    export resources_limits_memory=${props.resources_limits_memory}

                    # 이미지 경로 환경변수 설정
                    export member_image_path=${props.registry}/${props.image_org}/member:${imageTag}
                    export mysub_image_path=${props.registry}/${props.image_org}/mysub:${imageTag}
                    export recommend_image_path=${props.registry}/${props.image_org}/recommend:${imageTag}

                    # manifest 생성
                    envsubst < deployment/${manifest}.template > deployment/${manifest}
                    echo "Generated manifest file:"
                    cat deployment/${manifest}
                """
            }

         container('azure-cli') {
                sh """
                    # 배포 전 현재 상태 확인
                    echo "=== Pre-deployment Status ==="
                    kubectl -n ${namespace} get all || echo "No resources found"
                    
                    echo "=== Available PostgreSQL Services ==="
                    kubectl -n ${namespace} get svc | grep postgres || echo "No PostgreSQL services found"

                    kubectl apply -f deployment/${manifest}

                    echo "=== Post-deployment Initial Status ==="
                    kubectl -n ${namespace} get pods -o wide
                    
                    echo "=== Recent Events ==="
                    kubectl -n ${namespace} get events --sort-by='.lastTimestamp' | tail -10

                    echo "Waiting for deployments to be ready..."
                    
                    # 각 서비스별로 개별 체크하여 어떤 서비스에서 실패하는지 확인
                    for service in member mysub recommend; do
                        echo ""
                        echo "============================================"
                        echo "Checking \$service deployment..."
                        echo "============================================"
                        
                        if kubectl -n ${namespace} wait --for=condition=available deployment/\$service --timeout=300s; then
                            echo "✅ \$service deployment successful!"
                        else
                            echo "❌ \$service deployment failed!"
                            
                            echo "--- \$service Pod Status ---"
                            kubectl -n ${namespace} get pods -l app=\$service -o wide
                            
                            echo "--- \$service Pod Details ---"
                            kubectl -n ${namespace} describe pods -l app=\$service
                            
                            echo "--- \$service Pod Logs ---"
                            for pod in \$(kubectl -n ${namespace} get pods -l app=\$service -o jsonpath='{.items[*].metadata.name}' 2>/dev/null); do
                                if [ ! -z "\$pod" ]; then
                                    echo "=== Logs for \$pod ==="
                                    kubectl -n ${namespace} logs \$pod --tail=50 || echo "No logs available for \$pod"
                                    echo ""
                                fi
                            done
                            
                            echo "--- \$service Events ---"
                            kubectl -n ${namespace} get events --field-selector involvedObject.kind=Pod --sort-by='.lastTimestamp' | grep \$service || echo "No specific events for \$service"
                            
                            echo "--- \$service ConfigMap Check ---"
                            kubectl -n ${namespace} get configmap \$service-config -o yaml || echo "ConfigMap not found for \$service"
                            
                            echo "--- \$service Secret Check ---"
                            kubectl -n ${namespace} get secret database-secret -o yaml | grep -E "(POSTGRES_HOST|POSTGRES_USER)" || echo "Database secret check failed"
                        fi
                    done

                    echo ""
                    echo "=== Final Deployment Status ==="
                    kubectl -n ${namespace} get all
                    
                    echo ""
                    echo "=== All Events (Last 20) ==="
                    kubectl -n ${namespace} get events --sort-by='.lastTimestamp' | tail -20
                    
                    echo ""
                    echo "=== Network Connectivity Test ==="
                    # 간단한 네트워크 연결 테스트
                    for service in member mysub recommend; do
                        echo "Testing internal connectivity to \$service..."
                        kubectl -n ${namespace} run test-\$service --image=busybox --rm -i --restart=Never --timeout=10s -- sh -c "nslookup \$service.${namespace}.svc.cluster.local" 2>/dev/null || echo "DNS resolution failed for \$service"
                    done
                """
            }
        }
    }
}
